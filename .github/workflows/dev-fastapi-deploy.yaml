name: FastAPI ECS Deploy

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    env:
        applicationfolder: ''
        CI: false
        ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}   # name of the service
        ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}   # name of the cluster
        ECS_TASK_DEFINITION: ${{ secrets.ECS_TASKDEF }} 
        CONTAINER_NAME: ${{ secrets.API_CONTAINER_NAME }}
    permissions:
        id-token: write
        contents: read

    steps:
      - name: 'Test secret variable'
        run: |
            echo ${{ secrets.API_CONTAINER_NAME }} 

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: DevSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        run: |
          docker compose up --build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current task definition
        run: >
          aws ecs describe-task-definition
          --task-definition ${{ secrets.ECS_TASK_FAMILY }} --region ${{ secrets.APP_AWS_REGION }} --query 'taskDefinition'
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json 
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true